rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidUserType(userType) {
      return userType in ['founder', 'mentor', 'investor'];
    }

    function isValidPitchStatus(status) {
      return status in ['draft', 'submitted', 'analyzing', 'analyzed', 'completed', 'error'];
    }

    function hasValidEmail() {
      return request.auth.token.email != null && request.auth.token.email_verified == true;
    }

    // Allow users to create their own profile
    match /users/{userId} {
      allow create: if isAuthenticated() 
                   && isOwner(userId)
                   && hasValidEmail()
                   && isValidUserType(request.resource.data.userType);
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() 
                   && isOwner(userId)
                   && isValidUserType(request.resource.data.userType);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Startup profiles
    match /startups/{userId} {
      allow create: if isAuthenticated() 
                   && isOwner(userId)
                   && hasValidEmail();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Mentor profiles
    match /mentors/{userId} {
      allow create: if isAuthenticated() 
                   && isOwner(userId)
                   && hasValidEmail();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Investor profiles
    match /investors/{userId} {
      allow create: if isAuthenticated() 
                   && isOwner(userId)
                   && hasValidEmail();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Pitch submissions
    match /pitches/{pitchId} {
      allow create: if isAuthenticated() 
                   && request.resource.data.userId == request.auth.uid
                   && hasValidEmail()
                   && isValidPitchStatus(request.resource.data.status);
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() 
                   && resource.data.userId == request.auth.uid
                   && isValidPitchStatus(request.resource.data.status);
      allow delete: if isAuthenticated() 
                   && resource.data.userId == request.auth.uid;
    }

    // Pitch decks for AI analysis
    match /pitch_decks/{pitchId} {
      allow create: if isAuthenticated() 
                   && request.resource.data.userId == request.auth.uid
                   && hasValidEmail();
      allow read: if isAuthenticated() 
                  && (resource.data.userId == request.auth.uid || resource.data.isPublic == true);
      allow update: if isAuthenticated() 
                   && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
                   && resource.data.userId == request.auth.uid;
    }

    // Analysis results
    match /analysis_results/{analysisId} {
      allow create: if isAuthenticated() && hasValidEmail();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // User history
    match /user_history/{historyId} {
      allow create: if isAuthenticated() 
                   && request.resource.data.userId == request.auth.uid
                   && hasValidEmail();
      allow read: if isAuthenticated() 
                  && resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() 
                   && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
                   && resource.data.userId == request.auth.uid;
    }

    // Mentor matching and feedback
    match /mentor_feedback/{feedbackId} {
      allow create: if isAuthenticated() && hasValidEmail();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // System logs (admin only)
    match /system_logs/{logId} {
      allow read, write: if false; // Only accessible via admin SDK
    }

    // Test collection for Firebase testing
    match /test/{testId} {
      allow read, write: if isAuthenticated();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 